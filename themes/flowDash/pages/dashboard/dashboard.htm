title = "Dashboard"
daterange = 1
url = "/dashboard"
layout = "admin"
description = "Overview on your system"
is_hidden = 0
role = 0
permission = 0
anonymous_only = 0
logged_only = 1
child_of = "mey_no_parent"
hide_crumb = 1
remove_crumb_trail = 0
crumb_disabled = 0

[viewBag]
==
<?php
    function onStart(){
        $value                      =   50;
        if($this->user->mobile){
            $value                  +=  10;
        }
        if($this->user->street_addr){
            $value                  +=  5;
        }
        if($this->user->city_id){
            $value                  +=  5;
        }
        if($this->user->state_id){
            $value                  +=  5;
        }
        if($this->user->country_id){
            $value                  +=  5;
        }
        if($this->user->places){
            $value                  +=  20;
        }

        if($value <= 60){
            $status                 =   'danger';
        }elseif($value <= 100){
            $status                 =   'warning';
        }elseif($value == 100){
            $status                 =   'success';
        }
        $this['progress_value']     =   $value;
        $this['progress_status']    =   $status;

        $records                    =   \Spot\Shipment\Models\Order::orderBy('id', 'desc');
        $stockedRecord              =   \Spot\Shipment\Models\Order::orderBy('id', 'desc');
        $approvedRecord             =   \Spot\Shipment\Models\Order::orderBy('id', 'desc');
        $deliveredRecord            =   \Spot\Shipment\Models\Order::orderBy('id', 'desc');
        $savedREcord                =   \Spot\Shipment\Models\Order::orderBy('id', 'desc');

        switch (Auth::getUser()->role_id) {
            case 6:
                $records    =   $records->whereIn('office_id', Auth::getUser()->manage->pluck('id')->toArray());
                $stockedRecord    =   $stockedRecord->whereIn('office_id', Auth::getUser()->manage->pluck('id')->toArray());
                $approvedRecord    =   $approvedRecord->whereIn('office_id', Auth::getUser()->manage->pluck('id')->toArray());
                $deliveredRecord    =   $deliveredRecord->whereIn('office_id', Auth::getUser()->manage->pluck('id')->toArray());
                $savedREcord    =   $savedREcord->whereIn('office_id', Auth::getUser()->manage->pluck('id')->toArray());
                break;
            case 5:
                $records    =   $records->where(function($q){
                    $q->where('sender_id', Auth::getUser()->id);
                    $q->orWhere('receiver_id', Auth::getUser()->id);
                });
                $stockedRecord    =   $stockedRecord->where(function($q){
                    $q->where('sender_id', Auth::getUser()->id);
                    $q->orWhere('receiver_id', Auth::getUser()->id);
                });
                $approvedRecord    =   $approvedRecord->where(function($q){
                    $q->where('sender_id', Auth::getUser()->id);
                    $q->orWhere('receiver_id', Auth::getUser()->id);
                });
                $deliveredRecord    =   $deliveredRecord->where(function($q){
                    $q->where('sender_id', Auth::getUser()->id);
                    $q->orWhere('receiver_id', Auth::getUser()->id);
                });
                $savedREcord    =   $savedREcord->where(function($q){
                    $q->where('sender_id', Auth::getUser()->id);
                    $q->orWhere('receiver_id', Auth::getUser()->id);
                });
                break;
            case 4:
                if(Auth::getUser()->is_superuser){
                    $records    =   $records->where(function($q){
                        $q->where('office_id', Auth::getUser()->office);
                        $q->orWhere(function($q){
                            //Get all employees
                            $q->where('assigned_id', Auth::getUser()->id);
                        });
                        $q->orWhere(function($q){
                            $q->whereHas('manifest', function($q){
                                $q->where(function($q) {
                                    $q->where('driver_id', Auth::getUser()->id);
                                });
                                $q->orWhere(function($q){
                                    $q->where('employee_id', Auth::getUser()->id);
                                });
                            });
                        });
                    });
                    $stockedRecord    =   $stockedRecord->where(function($q){
                        $q->where('office_id', Auth::getUser()->office);
                        $q->orWhere(function($q){
                            //Get all employees
                            $q->where('assigned_id', Auth::getUser()->id);
                        });
                        $q->orWhere(function($q){
                            $q->whereHas('manifest', function($q){
                                $q->where(function($q) {
                                    $q->where('driver_id', Auth::getUser()->id);
                                });
                                $q->orWhere(function($q){
                                    $q->where('employee_id', Auth::getUser()->id);
                                });
                            });
                        });
                    });
                    $approvedRecord    =   $approvedRecord->where(function($q){
                        $q->where('office_id', Auth::getUser()->office);
                        $q->orWhere(function($q){
                            //Get all employees
                            $q->where('assigned_id', Auth::getUser()->id);
                        });
                        $q->orWhere(function($q){
                            $q->whereHas('manifest', function($q){
                                $q->where(function($q) {
                                    $q->where('driver_id', Auth::getUser()->id);
                                });
                                $q->orWhere(function($q){
                                    $q->where('employee_id', Auth::getUser()->id);
                                });
                            });
                        });
                    });
                    $deliveredRecord    =   $deliveredRecord->where(function($q){
                        $q->where('office_id', Auth::getUser()->office);
                        $q->orWhere(function($q){
                            //Get all employees
                            $q->where('assigned_id', Auth::getUser()->id);
                        });
                        $q->orWhere(function($q){
                            $q->whereHas('manifest', function($q){
                                $q->where(function($q) {
                                    $q->where('driver_id', Auth::getUser()->id);
                                });
                                $q->orWhere(function($q){
                                    $q->where('employee_id', Auth::getUser()->id);
                                });
                            });
                        });
                    });
                    $savedREcord    =   $savedREcord->where(function($q){
                        $q->where('office_id', Auth::getUser()->office);
                        $q->orWhere(function($q){
                            //Get all employees
                            $q->where('assigned_id', Auth::getUser()->id);
                        });
                        $q->orWhere(function($q){
                            $q->whereHas('manifest', function($q){
                                $q->where(function($q) {
                                    $q->where('driver_id', Auth::getUser()->id);
                                });
                                $q->orWhere(function($q){
                                    $q->where('employee_id', Auth::getUser()->id);
                                });
                            });
                        });
                    });
                }else{
                    $records    =   $records->where(function($q){
                        $q->where(function($q){
                            //Get all employees
                            $q->where('assigned_id', Auth::getUser()->id);
                        });
                        $q->orWhere(function($q){
                            $q->whereHas('manifest', function($q){
                                $q->where(function($q) {
                                    $q->where('driver_id', Auth::getUser()->id);
                                });
                                $q->orWhere(function($q){
                                    $q->where('employee_id', Auth::getUser()->id);
                                });
                            });
                        });
                    });
                    $stockedRecord    =   $stockedRecord->where(function($q){
                        $q->where(function($q){
                            //Get all employees
                            $q->where('assigned_id', Auth::getUser()->id);
                        });
                        $q->orWhere(function($q){
                            $q->whereHas('manifest', function($q){
                                $q->where(function($q) {
                                    $q->where('driver_id', Auth::getUser()->id);
                                });
                                $q->orWhere(function($q){
                                    $q->where('employee_id', Auth::getUser()->id);
                                });
                            });
                        });
                    });
                    $approvedRecord    =   $approvedRecord->where(function($q){
                        $q->where(function($q){
                            //Get all employees
                            $q->where('assigned_id', Auth::getUser()->id);
                        });
                        $q->orWhere(function($q){
                            $q->whereHas('manifest', function($q){
                                $q->where(function($q) {
                                    $q->where('driver_id', Auth::getUser()->id);
                                });
                                $q->orWhere(function($q){
                                    $q->where('employee_id', Auth::getUser()->id);
                                });
                            });
                        });
                    });
                    $deliveredRecord    =   $deliveredRecord->where(function($q){
                        $q->where(function($q){
                            //Get all employees
                            $q->where('assigned_id', Auth::getUser()->id);
                        });
                        $q->orWhere(function($q){
                            $q->whereHas('manifest', function($q){
                                $q->where(function($q) {
                                    $q->where('driver_id', Auth::getUser()->id);
                                });
                                $q->orWhere(function($q){
                                    $q->where('employee_id', Auth::getUser()->id);
                                });
                            });
                        });
                    });
                    $savedREcord    =   $savedREcord->where(function($q){
                        $q->where(function($q){
                            //Get all employees
                            $q->where('assigned_id', Auth::getUser()->id);
                        });
                        $q->orWhere(function($q){
                            $q->whereHas('manifest', function($q){
                                $q->where(function($q) {
                                    $q->where('driver_id', Auth::getUser()->id);
                                });
                                $q->orWhere(function($q){
                                    $q->where('employee_id', Auth::getUser()->id);
                                });
                            });
                        });
                    });
                }
                break;
            case 3:
                $employees  =   \RainLab\User\Models\User::whereHas('groups',function($q){$q->whereIn('user_group_id', Auth::getUser()->groups->pluck('id')->toArray());})->pluck('id')->toArray();
                $records    =   $records->where(function($q) use($employees){
                    $q->where(function($q) use($employees){
                        //Get all employees
                        $q->whereIn('assigned_id', $employees);
                    });
                    $q->orWhere(function($q) use($employees){
                        $q->whereHas('manifest', function($q) use($employees){
                            $q->where(function($q) use($employees){
                                $q->whereIn('driver_id', $employees);
                            });
                            $q->orWhere(function($q) use($employees){
                                $q->whereIn('employee_id', $employees);
                            });
                        });
                    });
                });
                $stockedRecord    =   $stockedRecord->where(function($q) use($employees){
                    $q->where(function($q) use($employees){
                        //Get all employees
                        $q->whereIn('assigned_id', $employees);
                    });
                    $q->orWhere(function($q) use($employees){
                        $q->whereHas('manifest', function($q) use($employees){
                            $q->where(function($q) use($employees){
                                $q->whereIn('driver_id', $employees);
                            });
                            $q->orWhere(function($q) use($employees){
                                $q->whereIn('employee_id', $employees);
                            });
                        });
                    });
                });
                $approvedRecord    =   $approvedRecord->where(function($q) use($employees){
                    $q->where(function($q) use($employees){
                        //Get all employees
                        $q->whereIn('assigned_id', $employees);
                    });
                    $q->orWhere(function($q) use($employees){
                        $q->whereHas('manifest', function($q) use($employees){
                            $q->where(function($q) use($employees){
                                $q->whereIn('driver_id', $employees);
                            });
                            $q->orWhere(function($q) use($employees){
                                $q->whereIn('employee_id', $employees);
                            });
                        });
                    });
                });
                $deliveredRecord    =   $deliveredRecord->where(function($q) use($employees){
                    $q->where(function($q) use($employees){
                        //Get all employees
                        $q->whereIn('assigned_id', $employees);
                    });
                    $q->orWhere(function($q) use($employees){
                        $q->whereHas('manifest', function($q) use($employees){
                            $q->where(function($q) use($employees){
                                $q->whereIn('driver_id', $employees);
                            });
                            $q->orWhere(function($q) use($employees){
                                $q->whereIn('employee_id', $employees);
                            });
                        });
                    });
                });
                $savedREcord    =   $savedREcord->where(function($q) use($employees){
                    $q->where(function($q) use($employees){
                        //Get all employees
                        $q->whereIn('assigned_id', $employees);
                    });
                    $q->orWhere(function($q) use($employees){
                        $q->whereHas('manifest', function($q) use($employees){
                            $q->where(function($q) use($employees){
                                $q->whereIn('driver_id', $employees);
                            });
                            $q->orWhere(function($q) use($employees){
                                $q->whereIn('employee_id', $employees);
                            });
                        });
                    });
                });
                break;
        }
        /*
        $records    =   \Spot\Shipment\Models\Order::orderBy('id', 'desc');

        switch (Auth::getUser()->role_id) {
            case 6:
                $records    =   $records->where(function($q){
                    $q->where(function($q){
                        $q->where('type', 2);
                        $q->whereIn('for_id', Auth::getUser()->manage->pluck('id')->toArray());
                    });
                    $q->orWhere(function($q){
                        $q->whereHas('orders', function($q){
                            $q->whereIn('office_id', Auth::getUser()->manage->pluck('id')->toArray());
                        });
                    });
                    $q->orWhere(function($q){
                        $q->whereHas('treasury', function($q){
                            $q->whereIn('office_id', Auth::getUser()->manage->pluck('id')->toArray());
                        });
                    });
                });
                break;
            case 5:
                $records    =   $records->where(function($q){
                    $q->whereHas('order', function($q){
                        $q->where('sender_id', Auth::getUser()->id);
                        $q->orWhere('receiver_id', Auth::getUser()->id);
                    });
                });
                break;
            case 4:
                if(Auth::getUser()->is_superuser){
                    $records    =   $records->where(function($q){
                        $q->where(function($q){
                            $q->where('type', 2);
                            $q->where('for_id', Auth::getUser()->office);
                        });
                        $q->orWhere(function($q){
                            $q->whereHas('order', function($q){
                                $q->where('office_id', Auth::getUser()->office);
                            });
                        });
                        $q->orWhere(function($q){
                            $q->whereHas('treasury', function($q){
                                $q->where('office_id', Auth::getUser()->office);
                            });
                        });
                    });
                }else{
                    $records    =   $records->where(function($q){
                        $q->where(function($q){
                            $q->where('type', 1);
                            $q->where('for_id', Auth::getUser()->id);
                        });
                        $q->orWhere(function($q){
                            $q->whereHas('order', function($q){
                                $q->where(function($q){
                                    $q->where('assigned_id', Auth::getUser()->id);
                                });
                                $q->orWhere(function($q){
                                    $q->whereHas('manifest', function($q){
                                        $q->where(function($q) {
                                            $q->where('driver_id', Auth::getUser()->id);
                                        });
                                        $q->orWhere(function($q){
                                            $q->where('employee_id', Auth::getUser()->id);
                                        });
                                    });
                                });
                            });
                        });
                    });
                }
                break;
            case 3:
                $employees  =   \RainLab\User\Models\User::whereHas('groups',function($q){$q->whereIn('user_group_id', Auth::getUser()->groups->pluck('id')->toArray());})->pluck('id')->toArray();
                $records    =   $records->where(function($q) use($employees){
                    $q->where(function($q) use($employees){
                        $q->where('type', 1);
                        $q->whereIn('for_id', $employees);
                    });
                    $q->orWhere(function($q) use($employees){
                        $q->whereHas('order', function($q) use($employees){
                            $q->where(function($q) use($employees){
                                $q->whereIn('assigned_id', $employees);
                            });
                            $q->orWhere(function($q) use($employees){
                                $q->whereHas('manifest', function($q) use($employees){
                                    $q->where(function($q) use($employees){
                                        $q->whereIn('driver_id', $employees);
                                    });
                                    $q->orWhere(function($q) use($employees){
                                        $q->whereIn('employee_id', $employees);
                                    });
                                });
                            });
                        });
                    });
                });
                break;
        }
        */
        //0 = Pending | 1 = Approved | 2 = Refused | 3 = Delivered to driver | 4 = Delivered | 5 = Return request | 6 = Delivery of discards to the driver | 7 = Supply in stock | 8 = Returned | 9 = received
        $stockedRecord = $approvedRecord  =  $deliveredRecord = $savedREcord = $records;
         //dd($records->where('requested',7)->count());
        
        $new                        =   $records->where('requested',0)->count();
        $approved                   =   $approvedRecord->where('requested',1)->count();
        $stocked                    =   $stockedRecord->where('requested',7)->count();
        $delivered                  =   $deliveredRecord->whereIn('requested',[4,5,6,7,8,10,11,12])->count();
        $saved                      =   $savedREcord->where('requested',100)->count();
        
        $this['new']                =   $new;
        $this['approved']           =   $approved;
        $this['stocked']            =   $stocked;
        $this['delivered']          =   $delivered;
        $this['saved']              =   $saved;

    }
    function onDelete()
    {
        $data = post();
        if(!Auth::getUser()->hasUserPermission(["order"],'d')) {
            return Response::json(['error' => $this['theme_lang']['not_allowed']], 401);
        }

        if(null !== post('id')){
            if(is_array(post('id'))){
                foreach(post('id') as $id){
                    $item = \Spot\Shipment\Models\Order::where('id',$id)->first();

                    $activity                   = new \Spot\Shipment\Models\Activity;
                    $activity->user_id          = Auth::getUser()->id;
                    $activity->order_id         = $item->id;
                    $activity->description      = 'deleted';
                    $activity->created_at       = \Carbon\Carbon::now();
                    $activity->updated_at       = \Carbon\Carbon::now();
                    $activity->save();

                    $item->payments->each->delete();
                    $item->activities->each->delete();
                    $item->tasks->each->delete();
                    $item->items->each->delete();
                    $item->delete();
                }
            }else{
                $item = \Spot\Shipment\Models\Order::where('id',$data['id'])->first();

                $activity                   = new \Spot\Shipment\Models\Activity;
                $activity->user_id          = Auth::getUser()->id;
                $activity->order_id         = $item->id;
                $activity->description      = 'deleted';
                $activity->created_at       = \Carbon\Carbon::now();
                $activity->updated_at       = \Carbon\Carbon::now();
                $activity->save();

                $item->payments->each->delete();
                $item->activities->each->delete();
                $item->tasks->each->delete();
                $item->items->each->delete();
                $item->delete();
            }
            return Redirect::back();
        }
    }
?>
==
<!--Begin::Section-->


<div class="row card-group-row">
    <div class="col-lg-3 col-md-4 card-group-row__col">
        <div class="card card-group-row__card">
            <div class="p-2 d-flex flex-row align-items-center">
                <div class="avatar avatar-xs mr-2">
                    <span class="avatar-title rounded-circle text-center bg-primary">
                        <i class="flaticon-map-location">map</i>
                    </span>
                </div>
                <a href="{{url('dashboard/shipments/approved')}}" class="text-dark">
                    <strong>{{approved}} {{'shipment'|__}}</strong>
                </a>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-4 card-group-row__col">
        <div class="card card-group-row__card">
            <div class="p-2 d-flex flex-row align-items-center">
                <div class="avatar avatar-xs mr-2">
                    <span class="avatar-title rounded-circle text-center">
                        <i class="flaticon-truck"></i>
                    </span>
                </div>
                <a href="{{url('dashboard/shipments/stock')}}" class="text-dark">
                    <strong>{{stocked}} {{'shipment'|__}}</strong>
                </a>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-4 card-group-row__col">
        <div class="card card-group-row__card">
            <div class="p-2 d-flex flex-row align-items-center">
                <div class="avatar avatar-xs mr-2">
                    <span class="avatar-title rounded-circle text-center bg-success">
                        <i class="flaticon-bag"></i>
                    </span>
                </div>
                <a href="{{url('dashboard/shipments/delivered')}}" class="text-dark">
                    <strong>{{delivered}} {{'shipment'|__}}</strong>
                </a>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-4 card-group-row__col">
        <div class="card card-group-row__card">
            <div class="p-2 d-flex flex-row align-items-center">
                <div class="avatar avatar-xs mr-2">
                    <span class="avatar-title rounded-circle text-center bg-info">
                        <i class="flaticon-file-2"></i>
                    </span>
                </div>
                {% if user.role_id == 5 %}
                <a href="#" class="text-dark">
                    <strong>{{saved}} {{'Saved Shipments'|__}}</strong>
                </a>
                {% else %}
                <a href="#" class="text-dark">
                    <strong>{{new}} {{'New Shipment Request'|__}}</strong>
                </a>
                {% endif %}
            </div>
        </div>
    </div>

</div>

{% if user.role_id == 1 or user.role_id == 6 %}
<div class="row">
    <div class="col">
        <div class="card">
            <div class="card-header card-header-large bg-white">
                <h4 class="card-header__title">{{'Summary'|__}} </h4>
            </div>
            {% partial 'summarywidget' %}
           

        </div>
    </div>

    <div class="col">
        <div class="card">
            <div class="card-header card-header-large bg-white d-flex align-items-center">
                <h4 class="card-header__title flex m-0">Chart</h4>
                
            </div>
            {% partial 'chartswidget' %}
            
            
        </div>
    </div>
</div>
{% endif %}

<div class="row">
    <div class="col">
        <div class="card">
            <div class="card-header card-header-large bg-white">
                <h4 class="card-header__title">{{'Latest shipments'|__}}</h4>
            </div>
            <div class="table-responsive" id="listing">
                {% partial 'listingwidget' %}

            </div>

            <div class="card-footer text-center border-0">
                <a class="text-muted" href="{{url('dashboard/shipments/all')}}">{{'View All Shipments'|__}}</a>
            </div>
        </div>
    </div>
</div>




{% put scripts %}
<script>
"use strict";

// Class definition
var KTDashboard = function() {

    // Daterangepicker Init
    var daterangepickerInit = function() {
        if ($('#kt_dashboard_daterangepicker').length == 0) {
            return;
        }

        moment.locale('{{currentLang}}');
        moment.updateLocale('{{currentLang}}', {
            months : [
                "{{'January'|__}}", "{{'February'|__}}", "{{'March'|__}}", "{{'April'|__}}", "{{'May'|__}}", "{{'June'|__}}", "{{'July'|__}}",
                "{{'August'|__}}", "{{'September'|__}}", "{{'October'|__}}", "{{'November'|__}}", "{{'December'|__}}"
            ]
        });
        var picker = $('#kt_dashboard_daterangepicker');
        var start = moment().utcOffset(KTAppOptions.timezone_offset).startOf('month');
        var end = moment().utcOffset(KTAppOptions.timezone_offset).endOf('month');

        function cb(start, end, label) {
            var title = '';
            var range = '';

            if ((end - start) < 100 || label == 'Today') {
                title = '{{"Today"|__}}:';
                range = start.format(KTAppOptions.daterangeformat);
            } else if (label == '{{"Yesterday"|__}}') {
                title = '{{"Yesterday"|__}}:';
                range = start.format(KTAppOptions.daterangeformat);
            } else {
                range = start.format(KTAppOptions.daterangeformat) + ' - ' + end.format(KTAppOptions.daterangeformat);
            }

            $('#kt_dashboard_daterangepicker_date').html(range);
            $('#kt_dashboard_daterangepicker_title').html(title);

            //List All Widgets in dashboard
            KTApp.block('#summary_container', {});
            KTApp.block('#charts', {});
            KTApp.block('#listing_container', {});
            $.request('onRefreshTime', {
                data: {start: start.format(KTAppOptions.daterangeformat), end: end.format(KTAppOptions.daterangeformat)},
                update: { summarywidget: '#summary',chartswidget: '#charts', listingwidget: '#listing' },
                complete: function(e) {
                    Chart.helpers.each(Chart.instances, function (instance) {
                         instance.destroy();
                    });

                    {% if user.role_id == 1 or user.role_id == 6 %}
                        quickStats();
                    {% endif %}
                    listing();
                    KTApp.unblock('#summary_container');
                    KTApp.unblock('#listing_container');
                }
            });
        }

        picker.daterangepicker({
            direction: KTUtil.isRTL(),
            locale: {
                "format": KTAppOptions.daterangeformat,
                "separator": " - ",
                "applyLabel": "{{'Apply'|__}}",
                "cancelLabel": "{{'Cancel'|__}}",
                "fromLabel": "{{'From'|__}}",
                "toLabel": "{{'To'|__}}",
                "customRangeLabel": "{{'Custom'|__}}",
                "daysOfWeek": [
                    "{{'Su'|__}}",
                    "{{'Mo'|__}}",
                    "{{'Tu'|__}}",
                    "{{'We'|__}}",
                    "{{'Th'|__}}",
                    "{{'Fr'|__}}",
                    "{{'Sa'|__}}"
                ],
                "monthNames": [
                    "{{'January'|__}}",
                    "{{'February'|__}}",
                    "{{'March'|__}}",
                    "{{'April'|__}}",
                    "{{'May'|__}}",
                    "{{'June'|__}}",
                    "{{'July'|__}}",
                    "{{'August'|__}}",
                    "{{'September'|__}}",
                    "{{'October'|__}}",
                    "{{'November'|__}}",
                    "{{'December'|__}}"
                ],
                "monthsShort": [
                    "{{'January'|__}}",
                    "{{'February'|__}}",
                    "{{'March'|__}}",
                    "{{'April'|__}}",
                    "{{'May'|__}}",
                    "{{'June'|__}}",
                    "{{'July'|__}}",
                    "{{'August'|__}}",
                    "{{'September'|__}}",
                    "{{'October'|__}}",
                    "{{'November'|__}}",
                    "{{'December'|__}}"
                ],
                "firstDay": 1
            },
            startDate: start,
            endDate: end,
            opens: 'left',
            ranges: {
                '{{"Today"|__}}': [moment().utcOffset(KTAppOptions.timezone_offset), moment().utcOffset(KTAppOptions.timezone_offset)],
                '{{"Yesterday"|__}}': [moment().utcOffset(KTAppOptions.timezone_offset).subtract(1, 'days'), moment().utcOffset(KTAppOptions.timezone_offset).subtract(1, 'days')],
                '{{"Last 7 Days"|__}}': [moment().utcOffset(KTAppOptions.timezone_offset).subtract(6, 'days'), moment().utcOffset(KTAppOptions.timezone_offset)],
                '{{"Last 30 Days"|__}}': [moment().utcOffset(KTAppOptions.timezone_offset).subtract(29, 'days'), moment().utcOffset(KTAppOptions.timezone_offset)],
                '{{"This Month"|__}}': [moment().utcOffset(KTAppOptions.timezone_offset).startOf('month'), moment().utcOffset(KTAppOptions.timezone_offset).endOf('month')],
                '{{"Last Month"|__}}': [moment().utcOffset(KTAppOptions.timezone_offset).subtract(1, 'month').startOf('month'), moment().utcOffset(KTAppOptions.timezone_offset).subtract(1, 'month').endOf('month')]
            }
        }, cb);

        cb(start, end, '');
    }

    return {
        // Init demos
        init: function() {
            daterangepickerInit();
            var loading = new KTDialog({'type': 'loader', 'placement': 'top center', 'message': KTAppOptions.text.loading});
            loading.show();

            setTimeout(function() {
                loading.hide();
            }, 3000);
        }
    };
}();

function _initSparklineChart(src, data, color, border) {
    if (src.length == 0) {
        return;
    }

    var config = {
        type: 'line',
        data: {
            labels: ["{{'January'|__}}", "{{'February'|__}}", "{{'March'|__}}", "{{'April'|__}}", "{{'May'|__}}", "{{'June'|__}}", "{{'July'|__}}", "{{'August'|__}}", "{{'September'|__}}", "{{'October'|__}}"],
            datasets: [{
                label: "",
                borderColor: color,
                borderWidth: border,

                pointHoverRadius: 4,
                pointHoverBorderWidth: 12,
                pointBackgroundColor: Chart.helpers.color('#000000').alpha(0).rgbString(),
                pointBorderColor: Chart.helpers.color('#000000').alpha(0).rgbString(),
                pointHoverBackgroundColor: KTApp.getStateColor('danger'),
                pointHoverBorderColor: Chart.helpers.color('#000000').alpha(0.1).rgbString(),
                fill: false,
                data: data,
            }]
        },
        options: {
            title: {
                display: false,
            },
            tooltips: {
                enabled: false,
                intersect: false,
                mode: 'nearest',
                xPadding: 10,
                yPadding: 10,
                caretPadding: 10
            },
            legend: {
                display: false,
                labels: {
                    usePointStyle: false
                }
            },
            responsive: true,
            maintainAspectRatio: true,
            hover: {
                mode: 'index'
            },
            scales: {
                xAxes: [{
                    display: false,
                    gridLines: false,
                    scaleLabel: {
                        display: true,
                        labelString: '{{"Month"|__}}'
                    }
                }],
                yAxes: [{
                    display: false,
                    gridLines: false,
                    scaleLabel: {
                        display: true,
                        labelString: '{{"Value"|__}}'
                    },
                    ticks: {
                        beginAtZero: true
                    }
                }]
            },

            elements: {
                point: {
                    radius: 4,
                    borderWidth: 12
                },
            },

            layout: {
                padding: {
                    left: 0,
                    right: 10,
                    top: 5,
                    bottom: 0
                }
            }
        }
    };

    new Chart(src, config);
}
// Class initialization on page load
jQuery(document).ready(function() {
    KTDashboard.init();
});
</script>
{% endput %}
